
ZigBeeController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000060  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000123  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003ad  00000000  00000000  00000339  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000026f  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003f9  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000100  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001d9  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000053  00000000  00000000  00001029  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__vector_11>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e3       	ldi	r30, 0x3A	; 58
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>
  48:	2b d0       	rcall	.+86     	; 0xa0 <main>
  4a:	75 c0       	rjmp	.+234    	; 0x136 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <initHardware>:
 * @POST:	The hardware (Modules and Peripherals) is initialized and is
 * 			ready for use.
 */
void initHardware(void){

	USART_init();
  4e:	4a d0       	rcall	.+148    	; 0xe4 <USART_init>
	USART_EnableTx();
  50:	55 d0       	rcall	.+170    	; 0xfc <USART_EnableTx>
	USART_EnableRx();
  52:	58 d0       	rcall	.+176    	; 0x104 <USART_EnableRx>
	sei();
  54:	78 94       	sei
}
  56:	08 95       	ret

00000058 <__vector_11>:
//  ---------------------------------------------------------------------------
//      OS POLLING
//  ---------------------------------------------------------------------------

ISR(USART_RXC_vect) 
{
  58:	1f 92       	push	r1
  5a:	0f 92       	push	r0
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	0f 92       	push	r0
  60:	11 24       	eor	r1, r1
  62:	2f 93       	push	r18
  64:	3f 93       	push	r19
  66:	4f 93       	push	r20
  68:	5f 93       	push	r21
  6a:	6f 93       	push	r22
  6c:	7f 93       	push	r23
  6e:	8f 93       	push	r24
  70:	9f 93       	push	r25
  72:	af 93       	push	r26
  74:	bf 93       	push	r27
  76:	ef 93       	push	r30
  78:	ff 93       	push	r31
	USART_Enviar(USART_Recibir());
  7a:	4c d0       	rcall	.+152    	; 0x114 <USART_Recibir>
  7c:	47 d0       	rcall	.+142    	; 0x10c <USART_Enviar>
}
  7e:	ff 91       	pop	r31
  80:	ef 91       	pop	r30
  82:	bf 91       	pop	r27
  84:	af 91       	pop	r26
  86:	9f 91       	pop	r25
  88:	8f 91       	pop	r24
  8a:	7f 91       	pop	r23
  8c:	6f 91       	pop	r22
  8e:	5f 91       	pop	r21
  90:	4f 91       	pop	r20
  92:	3f 91       	pop	r19
  94:	2f 91       	pop	r18
  96:	0f 90       	pop	r0
  98:	0f be       	out	0x3f, r0	; 63
  9a:	0f 90       	pop	r0
  9c:	1f 90       	pop	r1
  9e:	18 95       	reti

000000a0 <main>:

//  ---------------------------------------------------------------------------
//      MAIN PROGRAM / ROUTINE
//  ---------------------------------------------------------------------------

int main(void){
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a4:	48 ec       	ldi	r20, 0xC8	; 200
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	ca 01       	movw	r24, r20
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0xa>
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b2:	87 e0       	ldi	r24, 0x07	; 7
  b4:	20 3d       	cpi	r18, 0xD0	; 208
  b6:	38 07       	cpc	r19, r24
  b8:	b9 f7       	brne	.-18     	; 0xa8 <main+0x8>
 * @POST:	The hardware (Modules and Peripherals) is initialized and is
 * 			ready for use.
 */
void initHardware(void){

	USART_init();
  ba:	14 d0       	rcall	.+40     	; 0xe4 <USART_init>
	USART_EnableTx();
  bc:	1f d0       	rcall	.+62     	; 0xfc <USART_EnableTx>
	USART_EnableRx();
  be:	22 d0       	rcall	.+68     	; 0x104 <USART_EnableRx>
	sei();
  c0:	78 94       	sei
int main(void){
	
	
	_delay_ms(200);
	initHardware();
	USART_EnviarLn("Inicio");
  c2:	86 e0       	ldi	r24, 0x06	; 6
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	60 e6       	ldi	r22, 0x60	; 96
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	28 d0       	rcall	.+80     	; 0x11c <USART_EnviarStrLen>
  cc:	8d e0       	ldi	r24, 0x0D	; 13
  ce:	1e d0       	rcall	.+60     	; 0x10c <USART_Enviar>
  d0:	20 e4       	ldi	r18, 0x40	; 64
  d2:	3c e9       	ldi	r19, 0x9C	; 156
  d4:	c9 01       	movw	r24, r18
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x36>
  da:	fc cf       	rjmp	.-8      	; 0xd4 <main+0x34>

000000dc <ZigBee_AT_Config>:
}


void ZigBee_AT_Config(){

		sei();
  dc:	78 94       	sei
				ptrBuffer=0;
			}
		}

		*/
}
  de:	08 95       	ret

000000e0 <ZigBee_AT_EnviarCh>:


*/

void ZigBee_AT_EnviarCh(uint8_t msg){
	USART_Enviar(msg);
  e0:	15 d0       	rcall	.+42     	; 0x10c <USART_Enviar>
}
  e2:	08 95       	ret

000000e4 <USART_init>:
 * @RETURN: Void
 */
void USART_init(){

	// Nos aseguramos que la USART se encuentre inactiva y configuracion default
	UCSRA = 0x20;
  e4:	80 e2       	ldi	r24, 0x20	; 32
  e6:	8b b9       	out	0x0b, r24	; 11
	UCSRB = 0x00;
  e8:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x06;
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 bd       	out	0x20, r24	; 32
	

	// Asignamos el valor del valor de la tasa de transmision en baudios
	UBRRL=UBRRVAL;			//Parte baja del byte
  ee:	83 e3       	ldi	r24, 0x33	; 51
  f0:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);	//Parte alta del byte
  f2:	10 bc       	out	0x20, r1	; 32
		case 7: UCSRC &= ~(_BV(UCSZ0));break;
		case 9: UCSRB|= _BV(UCSZ2);break;
		default:break;
	}

	UCSRB |= (INT_TX_COMPLETA)?_BV(TXCIE):0;
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (INT_RX_COMPLETA)?_BV(RXCIE):0;
  f8:	57 9a       	sbi	0x0a, 7	; 10
		default: break;
	}

	if(NUM_STOP==2) UCSRC |= _BV(USBS);
	if(CLK_POL) UCSRC |= _BV(UCPOL);
}
  fa:	08 95       	ret

000000fc <USART_EnableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para transmision 
 * @RETURN: Void
 */
void USART_EnableTx(){
	UCSRB |= _BV(TXEN);
  fc:	53 9a       	sbi	0x0a, 3	; 10
}
  fe:	08 95       	ret

00000100 <USART_DisableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para transmision 
 * @RETURN: Void
 */
void USART_DisableTx(){
	UCSRB &= ~_BV(TXEN);
 100:	53 98       	cbi	0x0a, 3	; 10
}
 102:	08 95       	ret

00000104 <USART_EnableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para Recepsion 
 * @RETURN: Void
 */
void USART_EnableRx(){
	UCSRB |= _BV(RXEN);
 104:	54 9a       	sbi	0x0a, 4	; 10
}
 106:	08 95       	ret

00000108 <USART_DisableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para Recepcion 
 * @RETURN: Void
 */
 void USART_DisableRx(){
 	UCSRB &= ~_BV(RXEN);
 108:	54 98       	cbi	0x0a, 4	; 10
 }
 10a:	08 95       	ret

0000010c <USART_Enviar>:
  * @RETURN: Void
  */
void USART_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSRA & (1<<UDRE)) );
 10c:	5d 9b       	sbis	0x0b, 5	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <USART_Enviar>

	// Coloca el dato a enviar en el buffer de salida
	UDR = dato;
 110:	8c b9       	out	0x0c, r24	; 12

}
 112:	08 95       	ret

00000114 <USART_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t USART_Recibir(){

	// Se espera a que se reciba un mensaje si esta no ha llegado todavia
	while ( !(UCSRA & (1<<RXC)) );
 114:	5f 9b       	sbis	0x0b, 7	; 11
 116:	fe cf       	rjmp	.-4      	; 0x114 <USART_Recibir>
	return UDR;
 118:	8c b1       	in	r24, 0x0c	; 12
}
 11a:	08 95       	ret

0000011c <USART_EnviarStrLen>:
 * @PARAMS:
 * @PRE:
 * @POST:
 * @RETURN:
 */
void USART_EnviarStrLen(int len, char *buf){
 11c:	fb 01       	movw	r30, r22

	for (; len > 0; len--){
 11e:	18 16       	cp	r1, r24
 120:	19 06       	cpc	r1, r25
 122:	44 f4       	brge	.+16     	; 0x134 <USART_EnviarStrLen+0x18>
		USART_Enviar(*buf++);
 124:	21 91       	ld	r18, Z+
  * @RETURN: Void
  */
void USART_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSRA & (1<<UDRE)) );
 126:	5d 9b       	sbis	0x0b, 5	; 11
 128:	fe cf       	rjmp	.-4      	; 0x126 <USART_EnviarStrLen+0xa>

	// Coloca el dato a enviar en el buffer de salida
	UDR = dato;
 12a:	2c b9       	out	0x0c, r18	; 12
 * @POST:
 * @RETURN:
 */
void USART_EnviarStrLen(int len, char *buf){

	for (; len > 0; len--){
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	18 16       	cp	r1, r24
 130:	19 06       	cpc	r1, r25
 132:	c4 f3       	brlt	.-16     	; 0x124 <USART_EnviarStrLen+0x8>
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>

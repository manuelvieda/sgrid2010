
XBee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000068  00800100  00800100  000002c4  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000f0  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000357  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000213  00000000  00000000  0000074b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000036d  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000183  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000cf  00000000  00000000  00000edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   8:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
   c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  10:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  14:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  18:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  24:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_20>
  54:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  58:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  5c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  60:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  68:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  6c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a8 36       	cpi	r26, 0x68	; 104
  88:	b1 07       	cpc	r27, r17
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  90:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <initHardware>:
 * @POST:	The hardware (Modules and Peripherals) is initialized and is
 * 			ready for use.
 */
void initHardware(void){

	ZigBee_init();
  98:	0e 94 b2 00 	call	0x164	; 0x164 <ZigBee_init>
	sei();
  9c:	78 94       	sei
}
  9e:	08 95       	ret

000000a0 <main>:

//  ---------------------------------------------------------------------------
//      MAIN PROGRAM / ROUTINE
//  ---------------------------------------------------------------------------

int main(void){
  a0:	80 ed       	ldi	r24, 0xD0	; 208
  a2:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a4:	28 ec       	ldi	r18, 0xC8	; 200
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0xa>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b0:	d9 f7       	brne	.-10     	; 0xa8 <main+0x8>

	_delay_ms(200);
	initHardware();
  b2:	0e 94 4c 00 	call	0x98	; 0x98 <initHardware>
	atenderXBee();
  b6:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <atenderXBee>
	while(1){USART_Enviar('x');}
  ba:	88 e7       	ldi	r24, 0x78	; 120
  bc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <USART_Enviar>
  c0:	fc cf       	rjmp	.-8      	; 0xba <main+0x1a>

000000c2 <__vector_20>:

void USART_Enviar(uint8_t);



ISR(USART0_RX_vect){
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31

	// Recibimos dato y lo almacenamos en buffer
	switch(bufferLibre){
  d4:	80 91 00 01 	lds	r24, 0x0100
  d8:	88 23       	and	r24, r24
  da:	19 f0       	breq	.+6      	; 0xe2 <__vector_20+0x20>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	b9 f5       	brne	.+110    	; 0x14e <__vector_20+0x8c>
  e0:	1d c0       	rjmp	.+58     	; 0x11c <__vector_20+0x5a>
		case 0:
				buffer0[ptrBuffer0++]=UDR0;
  e2:	80 91 35 01 	lds	r24, 0x0135
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	90 91 c6 00 	lds	r25, 0x00C6
  ee:	ee 5f       	subi	r30, 0xFE	; 254
  f0:	fe 4f       	sbci	r31, 0xFE	; 254
  f2:	90 83       	st	Z, r25
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 35 01 	sts	0x0135, r24
				if(buffer0[ptrBuffer0-1]==0x0D){
  fa:	e0 91 35 01 	lds	r30, 0x0135
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ef 5f       	subi	r30, 0xFF	; 255
 102:	fe 4f       	sbci	r31, 0xFE	; 254
 104:	80 81       	ld	r24, Z
 106:	8d 30       	cpi	r24, 0x0D	; 13
 108:	21 f5       	brne	.+72     	; 0x152 <__vector_20+0x90>
					// Atendemos el mensaje recibido
					mensajeRecibido |= _BV(0);
 10a:	80 91 34 01 	lds	r24, 0x0134
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 93 34 01 	sts	0x0134, r24
					bufferLibre=1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 00 01 	sts	0x0100, r24
 11a:	1b c0       	rjmp	.+54     	; 0x152 <__vector_20+0x90>
				}
				break;


		case 1:
				buffer1[ptrBuffer1++]=UDR0;
 11c:	80 91 01 01 	lds	r24, 0x0101
 120:	e8 2f       	mov	r30, r24
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 91 c6 00 	lds	r25, 0x00C6
 128:	ea 5c       	subi	r30, 0xCA	; 202
 12a:	fe 4f       	sbci	r31, 0xFE	; 254
 12c:	90 83       	st	Z, r25
 12e:	8f 5f       	subi	r24, 0xFF	; 255
 130:	80 93 01 01 	sts	0x0101, r24
				if(buffer1[ptrBuffer1-1]==0x0D){
 134:	e0 91 01 01 	lds	r30, 0x0101
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	eb 5c       	subi	r30, 0xCB	; 203
 13c:	fe 4f       	sbci	r31, 0xFE	; 254
 13e:	80 81       	ld	r24, Z
 140:	8d 30       	cpi	r24, 0x0D	; 13
 142:	39 f4       	brne	.+14     	; 0x152 <__vector_20+0x90>
					// Atendemos el mensaje recibido
					mensajeRecibido |= _BV(1);
 144:	80 91 34 01 	lds	r24, 0x0134
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	80 93 34 01 	sts	0x0134, r24
					bufferLibre=0;
				}
				break;


		default: bufferLibre=0;break;
 14e:	10 92 00 01 	sts	0x0100, r1

	}

}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <ZigBee_init>:


void ZigBee_init(){

	// Nos aseguramos que la USART se encuentre inactiva y configuracion default
	UCSR0A = 0x20;
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = 0x00;
 16a:	e1 ec       	ldi	r30, 0xC1	; 193
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	10 82       	st	Z, r1
	UCSR0C = 0x06;
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	80 93 c2 00 	sts	0x00C2, r24
	

	// Asignamos el valor del valor de la tasa de transmision en baudios
	UBRR0L=UBRRVAL;			//Parte baja del byte
 176:	83 e3       	ldi	r24, 0x33	; 51
 178:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H=(UBRRVAL>>8);	//Parte alta del byte
 17c:	10 92 c5 00 	sts	0x00C5, r1
		case 7: UCSR0C &= ~(_BV(UCSZ00));break;
		case 9: UCSR0B|= _BV(UCSZ02);break;
		default:break;
	}

	UCSR0B |= (INT_TX_COMPLETA)?_BV(TXCIE0):0;
 180:	80 81       	ld	r24, Z
 182:	80 83       	st	Z, r24
	UCSR0B |= (INT_RX_COMPLETA)?_BV(RXCIE0):0;
 184:	80 81       	ld	r24, Z
 186:	80 68       	ori	r24, 0x80	; 128
 188:	80 83       	st	Z, r24
	}

	if(NUM_STOP==2) UCSR0C |= _BV(USBS0);

	// Enable Tx
	UCSR0B |= _BV(TXEN0);
 18a:	80 81       	ld	r24, Z
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	80 83       	st	Z, r24

	// Enable Rx
	UCSR0B |= _BV(RXEN0);
 190:	80 81       	ld	r24, Z
 192:	80 61       	ori	r24, 0x10	; 16
 194:	80 83       	st	Z, r24

	ptrBuffer0 = 0;
 196:	10 92 35 01 	sts	0x0135, r1
	ptrBuffer1 = 0;
 19a:	10 92 01 01 	sts	0x0101, r1
	mensajeRecibido = 0;
 19e:	10 92 34 01 	sts	0x0134, r1

}
 1a2:	08 95       	ret

000001a4 <USART_Enviar>:
  * @PARAMS uint8_t dato -> Dato que se desea enviar
  * @PRE:   El puerto USART0 se encuentra configurado y habilitado para el envio de mensajes+
  * @POST:  Se coloca el mensaje en el buffer de salida de la USART0
  * @RETURN: Void
  */
void USART_Enviar(uint8_t dato){
 1a4:	98 2f       	mov	r25, r24

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 1a6:	80 91 c0 00 	lds	r24, 0x00C0
 1aa:	85 ff       	sbrs	r24, 5
 1ac:	fc cf       	rjmp	.-8      	; 0x1a6 <USART_Enviar+0x2>
	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 1ae:	90 93 c6 00 	sts	0x00C6, r25

}
 1b2:	08 95       	ret

000001b4 <USART_EnviarStrLen>:
 * @PARAMS:
 * @PRE:
 * @POST:
 * @RETURN:
 */
void USART_EnviarStrLen(int len, char *buf){
 1b4:	9c 01       	movw	r18, r24
 1b6:	fb 01       	movw	r30, r22
 1b8:	0a c0       	rjmp	.+20     	; 0x1ce <USART_EnviarStrLen+0x1a>

	for (; len > 0; len--){
		USART_Enviar(*buf++);
 1ba:	90 81       	ld	r25, Z
  * @RETURN: Void
  */
void USART_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 1bc:	80 91 c0 00 	lds	r24, 0x00C0
 1c0:	85 ff       	sbrs	r24, 5
 1c2:	fc cf       	rjmp	.-8      	; 0x1bc <USART_EnviarStrLen+0x8>
 * @RETURN:
 */
void USART_EnviarStrLen(int len, char *buf){

	for (; len > 0; len--){
		USART_Enviar(*buf++);
 1c4:	31 96       	adiw	r30, 0x01	; 1
void USART_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 1c6:	90 93 c6 00 	sts	0x00C6, r25
 * @POST:
 * @RETURN:
 */
void USART_EnviarStrLen(int len, char *buf){

	for (; len > 0; len--){
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	30 40       	sbci	r19, 0x00	; 0
 1ce:	12 16       	cp	r1, r18
 1d0:	13 06       	cpc	r1, r19
 1d2:	9c f3       	brlt	.-26     	; 0x1ba <USART_EnviarStrLen+0x6>
		USART_Enviar(*buf++);
	}
}
 1d4:	08 95       	ret

000001d6 <atenderXBee>:
void atenderXBee(void){

	
	while(1){

		if(mensajeRecibido==0x01){
 1d6:	80 91 34 01 	lds	r24, 0x0134
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	c9 f4       	brne	.+50     	; 0x210 <atenderXBee+0x3a>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <atenderXBee+0x24>
			uint8_t i = 0;
			for(i=0; i<ptrBuffer0; i++){
				USART_Enviar(buffer0[i]);
 1e2:	e9 2f       	mov	r30, r25
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ee 5f       	subi	r30, 0xFE	; 254
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	e0 81       	ld	r30, Z
  * @RETURN: Void
  */
void USART_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 1ec:	80 91 c0 00 	lds	r24, 0x00C0
 1f0:	85 ff       	sbrs	r24, 5
 1f2:	fc cf       	rjmp	.-8      	; 0x1ec <atenderXBee+0x16>
	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 1f4:	e0 93 c6 00 	sts	0x00C6, r30
	
	while(1){

		if(mensajeRecibido==0x01){
			uint8_t i = 0;
			for(i=0; i<ptrBuffer0; i++){
 1f8:	9f 5f       	subi	r25, 0xFF	; 255
 1fa:	80 91 35 01 	lds	r24, 0x0135
 1fe:	98 17       	cp	r25, r24
 200:	80 f3       	brcs	.-32     	; 0x1e2 <atenderXBee+0xc>
				USART_Enviar(buffer0[i]);
			}
			mensajeRecibido &= ~_BV(0);
 202:	80 91 34 01 	lds	r24, 0x0134
 206:	8e 7f       	andi	r24, 0xFE	; 254
 208:	80 93 34 01 	sts	0x0134, r24
			ptrBuffer0=0;
 20c:	10 92 35 01 	sts	0x0135, r1
		}

		if(mensajeRecibido==0x02){
 210:	80 91 34 01 	lds	r24, 0x0134
 214:	82 30       	cpi	r24, 0x02	; 2
 216:	f9 f6       	brne	.-66     	; 0x1d6 <atenderXBee>
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0c c0       	rjmp	.+24     	; 0x234 <atenderXBee+0x5e>
			uint8_t i = 0;
			for(i=0; i<ptrBuffer1; i++){
				USART_Enviar(buffer1[i]);
 21c:	e9 2f       	mov	r30, r25
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	ea 5c       	subi	r30, 0xCA	; 202
 222:	fe 4f       	sbci	r31, 0xFE	; 254
 224:	e0 81       	ld	r30, Z
  * @RETURN: Void
  */
void USART_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSR0A & (1<<UDRE0)) );
 226:	80 91 c0 00 	lds	r24, 0x00C0
 22a:	85 ff       	sbrs	r24, 5
 22c:	fc cf       	rjmp	.-8      	; 0x226 <atenderXBee+0x50>
	// Coloca el dato a enviar en el buffer de salida
	UDR0 = dato;
 22e:	e0 93 c6 00 	sts	0x00C6, r30
			ptrBuffer0=0;
		}

		if(mensajeRecibido==0x02){
			uint8_t i = 0;
			for(i=0; i<ptrBuffer1; i++){
 232:	9f 5f       	subi	r25, 0xFF	; 255
 234:	80 91 01 01 	lds	r24, 0x0101
 238:	98 17       	cp	r25, r24
 23a:	80 f3       	brcs	.-32     	; 0x21c <atenderXBee+0x46>
				USART_Enviar(buffer1[i]);
			}
			mensajeRecibido &= ~_BV(1);
 23c:	80 91 34 01 	lds	r24, 0x0134
 240:	8d 7f       	andi	r24, 0xFD	; 253
 242:	80 93 34 01 	sts	0x0134, r24
			ptrBuffer1=0;
 246:	10 92 01 01 	sts	0x0101, r1
 24a:	c5 cf       	rjmp	.-118    	; 0x1d6 <atenderXBee>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>

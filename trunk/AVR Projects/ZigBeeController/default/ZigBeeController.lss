
ZigBeeController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000d5  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000295  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001a9  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002ec  00000000  00000000  00000641  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000c0  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000019c  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  00000b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	30 c0       	rjmp	.+96     	; 0x96 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  38:	80 e4       	ldi	r24, 0x40	; 64
  3a:	9c e9       	ldi	r25, 0x9C	; 156
  3c:	01 97       	sbiw	r24, 0x01	; 1
  3e:	f1 f7       	brne	.-4      	; 0x3c <main+0x4>
//  ---------------------------------------------------------------------------

int main(void){
	
	_delay_ms(20);
}
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	08 95       	ret

00000046 <initHardware>:
 * 			ready for use.
 */
void initHardware(void){


}
  46:	08 95       	ret

00000048 <USART_init>:
 * @RETURN: Void
 */
void USART_init(){

	// Nos aseguramos que la USART se encuentre inactiva y configuracion default
	UCSRA = 0x20;
  48:	80 e2       	ldi	r24, 0x20	; 32
  4a:	8b b9       	out	0x0b, r24	; 11
	UCSRB = 0x00;
  4c:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x06;
  4e:	86 e0       	ldi	r24, 0x06	; 6
  50:	80 bd       	out	0x20, r24	; 32
	

	// Asignamos el valor del valor de la tasa de transmision en baudios
	UBRRL=UBRRVAL;			//Parte baja del byte
  52:	83 e3       	ldi	r24, 0x33	; 51
  54:	89 b9       	out	0x09, r24	; 9
	UBRRH=(UBRRVAL>>8);	//Parte alta del byte
  56:	10 bc       	out	0x20, r1	; 32
		case 7: UCSRC &= ~(_BV(UCSZ0));break;
		case 9: UCSRB|= _BV(UCSZ2);break;
		default:break;
	}

	UCSRB |= (INT_TX_COMPLETA)?_BV(TXCIE):0;
  58:	56 9a       	sbi	0x0a, 6	; 10
	UCSRB |= (INT_RX_COMPLETA)?_BV(RXCIE):0;
  5a:	57 9a       	sbi	0x0a, 7	; 10
		default: break;
	}

	if(NUM_STOP==2) UCSRC |= _BV(USBS);
	if(CLK_POL) UCSRC |= _BV(UCPOL);
}
  5c:	08 95       	ret

0000005e <USART_EnableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para transmision 
 * @RETURN: Void
 */
void USART_EnableTx(){
	UCSRB |= _BV(TXEN);
  5e:	53 9a       	sbi	0x0a, 3	; 10
}
  60:	08 95       	ret

00000062 <USART_DisableTx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para transmision 
 * @RETURN: Void
 */
void USART_DisableTx(){
	UCSRB &= ~_BV(TXEN);
  62:	53 98       	cbi	0x0a, 3	; 10
}
  64:	08 95       	ret

00000066 <USART_EnableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se habilita para Recepsion 
 * @RETURN: Void
 */
void USART_EnableRx(){
	UCSRB |= _BV(RXEN);
  66:	54 9a       	sbi	0x0a, 4	; 10
}
  68:	08 95       	ret

0000006a <USART_DisableRx>:
 * @PRE:    El puerto USART0 se encuentra inicializado
 * @POST:   El puerto USART0 se deshabilita para Recepcion 
 * @RETURN: Void
 */
 void USART_DisableRx(){
 	UCSRB &= ~_BV(RXEN);
  6a:	54 98       	cbi	0x0a, 4	; 10
 }
  6c:	08 95       	ret

0000006e <USART_Enviar>:
  * @RETURN: Void
  */
void USART_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSRA & (1<<UDRE)) );
  6e:	5d 9b       	sbis	0x0b, 5	; 11
  70:	fe cf       	rjmp	.-4      	; 0x6e <USART_Enviar>

	// Coloca el dato a enviar en el buffer de salida
	UDR = dato;
  72:	8c b9       	out	0x0c, r24	; 12

}
  74:	08 95       	ret

00000076 <USART_Recibir>:
 * @RETURN: uint8_t dato -> El dato recibido en la transmision
 */
uint8_t USART_Recibir(){

	// Se espera a que se reciba un mensaje si esta no ha llegado todavia
	while ( !(UCSRA & (1<<RXC)) );
  76:	5f 9b       	sbis	0x0b, 7	; 11
  78:	fe cf       	rjmp	.-4      	; 0x76 <USART_Recibir>
	return UDR;
  7a:	8c b1       	in	r24, 0x0c	; 12
}
  7c:	08 95       	ret

0000007e <USART_EnviarStrLen>:
 * @PARAMS:
 * @PRE:
 * @POST:
 * @RETURN:
 */
void USART_EnviarStrLen(int len, char *buf){
  7e:	fb 01       	movw	r30, r22
  80:	06 c0       	rjmp	.+12     	; 0x8e <USART_EnviarStrLen+0x10>

	for (; len > 0; len--){
		USART_Enviar(*buf++);
  82:	20 81       	ld	r18, Z
  * @RETURN: Void
  */
void USART_Enviar(uint8_t dato){

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSRA & (1<<UDRE)) );
  84:	5d 9b       	sbis	0x0b, 5	; 11
  86:	fe cf       	rjmp	.-4      	; 0x84 <USART_EnviarStrLen+0x6>
 * @RETURN:
 */
void USART_EnviarStrLen(int len, char *buf){

	for (; len > 0; len--){
		USART_Enviar(*buf++);
  88:	31 96       	adiw	r30, 0x01	; 1

	// Espera a que se se termina la transmision anterior si esta en curso
	while ( !( UCSRA & (1<<UDRE)) );

	// Coloca el dato a enviar en el buffer de salida
	UDR = dato;
  8a:	2c b9       	out	0x0c, r18	; 12
 * @POST:
 * @RETURN:
 */
void USART_EnviarStrLen(int len, char *buf){

	for (; len > 0; len--){
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	18 16       	cp	r1, r24
  90:	19 06       	cpc	r1, r25
  92:	bc f3       	brlt	.-18     	; 0x82 <USART_EnviarStrLen+0x4>
		USART_Enviar(*buf++);
	}
}
  94:	08 95       	ret

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
